create table public.safety_audit_results (
  id uuid not null default gen_random_uuid (),
  audit_id uuid not null,
  requirement_id uuid not null,
  score integer null,
  score_label character varying(20) null,
  comment text null,
  weighted_score numeric(5, 2) null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  category_id uuid null,
  constraint safety_audit_results_pkey primary key (id),
  constraint safety_audit_results_unique_audit_requirement unique (audit_id, requirement_id),
  constraint safety_audit_results_audit_id_fkey foreign KEY (audit_id) references safety_audits (id) on delete CASCADE,
  constraint safety_audit_results_requirement_id_fkey foreign KEY (requirement_id) references safety_audit_requirements (id) on delete RESTRICT,
  constraint safety_audit_results_category_id_fkey foreign KEY (category_id) references safety_audit_categories (id) on delete RESTRICT,
  constraint safety_audit_results_score_label_check check (
    (
      (score_label)::text = any (
        (
          array[
            'compliant'::character varying,
            'partial'::character varying,
            'minimal'::character varying,
            'non_compliant'::character varying,
            'n/a'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint safety_audit_results_score_check check (
    (
      (score = any (array[0, 1, 2, 3]))
      or (score is null)
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_safety_audit_results_audit on public.safety_audit_results using btree (audit_id) TABLESPACE pg_default;

create index IF not exists idx_safety_audit_results_requirement on public.safety_audit_results using btree (requirement_id) TABLESPACE pg_default;

create index IF not exists idx_safety_audit_results_score on public.safety_audit_results using btree (score) TABLESPACE pg_default;

create index IF not exists idx_safety_audit_results_category on public.safety_audit_results using btree (category_id) TABLESPACE pg_default;

create index IF not exists idx_safety_audit_results_audit_category on public.safety_audit_results using btree (audit_id, category_id) TABLESPACE pg_default;

create trigger trg_update_audit_scores
after INSERT
or DELETE
or
update on safety_audit_results for EACH row
execute FUNCTION update_audit_category_scores ();

create trigger trigger_audit_results_calculate_scores
after INSERT
or DELETE
or
update on safety_audit_results for EACH row
execute FUNCTION trigger_calculate_audit_scores ();