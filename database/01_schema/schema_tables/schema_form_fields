create table public.form_fields (
  id uuid not null default gen_random_uuid (),
  form_template_id uuid not null,
  field_key text not null,
  field_type text not null,
  label_th text not null,
  label_en text null,
  placeholder_th text null,
  placeholder_en text null,
  help_text_th text null,
  help_text_en text null,
  default_value text null,
  is_required_by_default boolean null default false,
  is_visible_by_default boolean null default true,
  validation_rules jsonb null default '{}'::jsonb,
  options jsonb null default '[]'::jsonb,
  section text null,
  display_order integer not null default 0,
  depends_on jsonb null default '{}'::jsonb,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint form_fields_pkey primary key (id),
  constraint form_fields_form_template_id_field_key_key unique (form_template_id, field_key),
  constraint form_fields_form_template_id_fkey foreign KEY (form_template_id) references form_templates (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_form_fields_template on public.form_fields using btree (form_template_id) TABLESPACE pg_default;

create index IF not exists idx_form_fields_order on public.form_fields using btree (form_template_id, display_order) TABLESPACE pg_default;

create trigger trigger_form_fields_updated_at BEFORE
update on form_fields for EACH row
execute FUNCTION update_updated_at ();