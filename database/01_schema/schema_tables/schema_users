create table public.users (
  id uuid not null default gen_random_uuid (),
  email text null,
  first_name text null,
  last_name text null,
  user_type public.user_type_enum null default 'internal'::user_type_enum,
  status public.user_status null default 'invited'::user_status,
  role public.user_role null default 'member'::user_role,
  position_id integer null,
  company_id uuid null,
  invitation_token character varying null,
  invited_by uuid null,
  invitation_expires_at timestamp with time zone null,
  registration_completed_at timestamp with time zone null,
  auth_user_id uuid null,
  face_descriptors jsonb null,
  profile_photo_url text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  username text null,
  profile_completed_at timestamp with time zone null,
  first_name_thai text null,
  last_name_thai text null,
  nationality text null,
  department text null,
  job_title text null,
  azure_user_id text null,
  constraint users_pkey primary key (id),
  constraint users_auth_user_id_key unique (auth_user_id),
  constraint users_azure_user_id_key unique (azure_user_id),
  constraint users_username_key unique (username),
  constraint users_email_key unique (email),
  constraint users_invitation_token_key unique (invitation_token),
  constraint users_auth_fkey foreign KEY (auth_user_id) references auth.users (id) on delete CASCADE,
  constraint users_invited_by_fkey foreign KEY (invited_by) references users (id),
  constraint users_company_id_fkey foreign KEY (company_id) references companies (id),
  constraint users_position_id_fkey foreign KEY (position_id) references positions (id),
  constraint users_email_check check (
    (
      (
        (user_type = 'internal'::user_type_enum)
        and (email is not null)
        and (email <> ''::text)
      )
      or (user_type = 'external'::user_type_enum)
    )
  ),
  constraint users_role_check check (
    (
      (role)::text = any (
        array[
          'system_admin'::text,
          'admin'::text,
          'member'::text,
          'registrant'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_users_role on public.users using btree (role) TABLESPACE pg_default;

create index IF not exists idx_users_status on public.users using btree (status) TABLESPACE pg_default;

create index IF not exists idx_users_invitation_token on public.users using btree (invitation_token) TABLESPACE pg_default;

create index IF not exists idx_users_invited_by on public.users using btree (invited_by) TABLESPACE pg_default;

create index IF not exists idx_users_position_id on public.users using btree (position_id) TABLESPACE pg_default;

create index IF not exists idx_users_company_id on public.users using btree (company_id) TABLESPACE pg_default;

create index IF not exists idx_users_email on public.users using btree (email) TABLESPACE pg_default;

create index IF not exists idx_users_username on public.users using btree (username) TABLESPACE pg_default;

create index IF not exists idx_users_azure_user_id on public.users using btree (azure_user_id) TABLESPACE pg_default;

create index IF not exists idx_users_department on public.users using btree (department) TABLESPACE pg_default;

create index IF not exists idx_users_job_title on public.users using btree (job_title) TABLESPACE pg_default;