create table public.report_templates (
  id uuid not null default gen_random_uuid (),
  project_id uuid null,
  form_template_id uuid not null,
  name text not null,
  description text null,
  is_default boolean null default false,
  header_html text null,
  body_html text not null,
  footer_html text null,
  print_css text null,
  included_fields jsonb null default '[]'::jsonb,
  logo_url text null,
  watermark_url text null,
  paper_size text null default 'A4'::text,
  orientation text null default 'portrait'::text,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  created_by uuid null,
  updated_by uuid null,
  constraint report_templates_pkey primary key (id),
  constraint report_templates_created_by_fkey foreign KEY (created_by) references users (id),
  constraint report_templates_form_template_id_fkey foreign KEY (form_template_id) references form_templates (id) on delete CASCADE,
  constraint report_templates_project_id_fkey foreign KEY (project_id) references projects (id) on delete CASCADE,
  constraint report_templates_updated_by_fkey foreign KEY (updated_by) references users (id)
) TABLESPACE pg_default;

create index IF not exists idx_report_templates_project on public.report_templates using btree (project_id) TABLESPACE pg_default;

create index IF not exists idx_report_templates_form on public.report_templates using btree (form_template_id) TABLESPACE pg_default;

create trigger trigger_report_templates_updated_at BEFORE
update on report_templates for EACH row
execute FUNCTION update_updated_at ();